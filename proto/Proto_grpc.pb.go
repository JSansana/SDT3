// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NodoDominante_NodoClient is the client API for NodoDominante_Nodo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NodoDominante_NodoClient interface {
	GetPlanetas(ctx context.Context, in *SolicitudDominante, opts ...grpc.CallOption) (*RetornarPlanetas, error)
	//CUANDO TERMINE GETCIUDADES DEBE VACIARSE EL TEXTO DE ESE PLANETA
	GetCiudades(ctx context.Context, in *SolicitudDominante, opts ...grpc.CallOption) (*RetornarCiudades, error)
	AgregarCiudad(ctx context.Context, in *MessageINF, opts ...grpc.CallOption) (*RespuestaMos, error)
	ModificarVector(ctx context.Context, in *VectorNuevo, opts ...grpc.CallOption) (*RespuestaMos, error)
}

type nodoDominante_NodoClient struct {
	cc grpc.ClientConnInterface
}

func NewNodoDominante_NodoClient(cc grpc.ClientConnInterface) NodoDominante_NodoClient {
	return &nodoDominante_NodoClient{cc}
}

func (c *nodoDominante_NodoClient) GetPlanetas(ctx context.Context, in *SolicitudDominante, opts ...grpc.CallOption) (*RetornarPlanetas, error) {
	out := new(RetornarPlanetas)
	err := c.cc.Invoke(ctx, "/proto.NodoDominante_Nodo/GetPlanetas", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodoDominante_NodoClient) GetCiudades(ctx context.Context, in *SolicitudDominante, opts ...grpc.CallOption) (*RetornarCiudades, error) {
	out := new(RetornarCiudades)
	err := c.cc.Invoke(ctx, "/proto.NodoDominante_Nodo/GetCiudades", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodoDominante_NodoClient) AgregarCiudad(ctx context.Context, in *MessageINF, opts ...grpc.CallOption) (*RespuestaMos, error) {
	out := new(RespuestaMos)
	err := c.cc.Invoke(ctx, "/proto.NodoDominante_Nodo/AgregarCiudad", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodoDominante_NodoClient) ModificarVector(ctx context.Context, in *VectorNuevo, opts ...grpc.CallOption) (*RespuestaMos, error) {
	out := new(RespuestaMos)
	err := c.cc.Invoke(ctx, "/proto.NodoDominante_Nodo/ModificarVector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodoDominante_NodoServer is the server API for NodoDominante_Nodo service.
// All implementations must embed UnimplementedNodoDominante_NodoServer
// for forward compatibility
type NodoDominante_NodoServer interface {
	GetPlanetas(context.Context, *SolicitudDominante) (*RetornarPlanetas, error)
	//CUANDO TERMINE GETCIUDADES DEBE VACIARSE EL TEXTO DE ESE PLANETA
	GetCiudades(context.Context, *SolicitudDominante) (*RetornarCiudades, error)
	AgregarCiudad(context.Context, *MessageINF) (*RespuestaMos, error)
	ModificarVector(context.Context, *VectorNuevo) (*RespuestaMos, error)
	mustEmbedUnimplementedNodoDominante_NodoServer()
}

// UnimplementedNodoDominante_NodoServer must be embedded to have forward compatible implementations.
type UnimplementedNodoDominante_NodoServer struct {
}

func (UnimplementedNodoDominante_NodoServer) GetPlanetas(context.Context, *SolicitudDominante) (*RetornarPlanetas, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlanetas not implemented")
}
func (UnimplementedNodoDominante_NodoServer) GetCiudades(context.Context, *SolicitudDominante) (*RetornarCiudades, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCiudades not implemented")
}
func (UnimplementedNodoDominante_NodoServer) AgregarCiudad(context.Context, *MessageINF) (*RespuestaMos, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgregarCiudad not implemented")
}
func (UnimplementedNodoDominante_NodoServer) ModificarVector(context.Context, *VectorNuevo) (*RespuestaMos, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModificarVector not implemented")
}
func (UnimplementedNodoDominante_NodoServer) mustEmbedUnimplementedNodoDominante_NodoServer() {}

// UnsafeNodoDominante_NodoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NodoDominante_NodoServer will
// result in compilation errors.
type UnsafeNodoDominante_NodoServer interface {
	mustEmbedUnimplementedNodoDominante_NodoServer()
}

func RegisterNodoDominante_NodoServer(s grpc.ServiceRegistrar, srv NodoDominante_NodoServer) {
	s.RegisterService(&NodoDominante_Nodo_ServiceDesc, srv)
}

func _NodoDominante_Nodo_GetPlanetas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SolicitudDominante)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodoDominante_NodoServer).GetPlanetas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.NodoDominante_Nodo/GetPlanetas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodoDominante_NodoServer).GetPlanetas(ctx, req.(*SolicitudDominante))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodoDominante_Nodo_GetCiudades_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SolicitudDominante)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodoDominante_NodoServer).GetCiudades(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.NodoDominante_Nodo/GetCiudades",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodoDominante_NodoServer).GetCiudades(ctx, req.(*SolicitudDominante))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodoDominante_Nodo_AgregarCiudad_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageINF)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodoDominante_NodoServer).AgregarCiudad(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.NodoDominante_Nodo/AgregarCiudad",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodoDominante_NodoServer).AgregarCiudad(ctx, req.(*MessageINF))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodoDominante_Nodo_ModificarVector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VectorNuevo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodoDominante_NodoServer).ModificarVector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.NodoDominante_Nodo/ModificarVector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodoDominante_NodoServer).ModificarVector(ctx, req.(*VectorNuevo))
	}
	return interceptor(ctx, in, info, handler)
}

// NodoDominante_Nodo_ServiceDesc is the grpc.ServiceDesc for NodoDominante_Nodo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NodoDominante_Nodo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.NodoDominante_Nodo",
	HandlerType: (*NodoDominante_NodoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPlanetas",
			Handler:    _NodoDominante_Nodo_GetPlanetas_Handler,
		},
		{
			MethodName: "GetCiudades",
			Handler:    _NodoDominante_Nodo_GetCiudades_Handler,
		},
		{
			MethodName: "AgregarCiudad",
			Handler:    _NodoDominante_Nodo_AgregarCiudad_Handler,
		},
		{
			MethodName: "ModificarVector",
			Handler:    _NodoDominante_Nodo_ModificarVector_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/Proto.proto",
}

// Mos_FulcrumClient is the client API for Mos_Fulcrum service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Mos_FulcrumClient interface {
	GetSoldados(ctx context.Context, in *Solicitud, opts ...grpc.CallOption) (*LeiaResponse, error)
	GetVector(ctx context.Context, in *Solicitud, opts ...grpc.CallOption) (*Reloj, error)
}

type mos_FulcrumClient struct {
	cc grpc.ClientConnInterface
}

func NewMos_FulcrumClient(cc grpc.ClientConnInterface) Mos_FulcrumClient {
	return &mos_FulcrumClient{cc}
}

func (c *mos_FulcrumClient) GetSoldados(ctx context.Context, in *Solicitud, opts ...grpc.CallOption) (*LeiaResponse, error) {
	out := new(LeiaResponse)
	err := c.cc.Invoke(ctx, "/proto.Mos_Fulcrum/GetSoldados", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mos_FulcrumClient) GetVector(ctx context.Context, in *Solicitud, opts ...grpc.CallOption) (*Reloj, error) {
	out := new(Reloj)
	err := c.cc.Invoke(ctx, "/proto.Mos_Fulcrum/GetVector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Mos_FulcrumServer is the server API for Mos_Fulcrum service.
// All implementations must embed UnimplementedMos_FulcrumServer
// for forward compatibility
type Mos_FulcrumServer interface {
	GetSoldados(context.Context, *Solicitud) (*LeiaResponse, error)
	GetVector(context.Context, *Solicitud) (*Reloj, error)
	mustEmbedUnimplementedMos_FulcrumServer()
}

// UnimplementedMos_FulcrumServer must be embedded to have forward compatible implementations.
type UnimplementedMos_FulcrumServer struct {
}

func (UnimplementedMos_FulcrumServer) GetSoldados(context.Context, *Solicitud) (*LeiaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSoldados not implemented")
}
func (UnimplementedMos_FulcrumServer) GetVector(context.Context, *Solicitud) (*Reloj, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVector not implemented")
}
func (UnimplementedMos_FulcrumServer) mustEmbedUnimplementedMos_FulcrumServer() {}

// UnsafeMos_FulcrumServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Mos_FulcrumServer will
// result in compilation errors.
type UnsafeMos_FulcrumServer interface {
	mustEmbedUnimplementedMos_FulcrumServer()
}

func RegisterMos_FulcrumServer(s grpc.ServiceRegistrar, srv Mos_FulcrumServer) {
	s.RegisterService(&Mos_Fulcrum_ServiceDesc, srv)
}

func _Mos_Fulcrum_GetSoldados_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Solicitud)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Mos_FulcrumServer).GetSoldados(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Mos_Fulcrum/GetSoldados",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Mos_FulcrumServer).GetSoldados(ctx, req.(*Solicitud))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mos_Fulcrum_GetVector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Solicitud)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Mos_FulcrumServer).GetVector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Mos_Fulcrum/GetVector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Mos_FulcrumServer).GetVector(ctx, req.(*Solicitud))
	}
	return interceptor(ctx, in, info, handler)
}

// Mos_Fulcrum_ServiceDesc is the grpc.ServiceDesc for Mos_Fulcrum service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Mos_Fulcrum_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Mos_Fulcrum",
	HandlerType: (*Mos_FulcrumServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSoldados",
			Handler:    _Mos_Fulcrum_GetSoldados_Handler,
		},
		{
			MethodName: "GetVector",
			Handler:    _Mos_Fulcrum_GetVector_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/Proto.proto",
}

// InfoToMosClient is the client API for InfoToMos service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InfoToMosClient interface {
	AskAdress(ctx context.Context, in *Reloj, opts ...grpc.CallOption) (*RespuestaMos, error)
}

type infoToMosClient struct {
	cc grpc.ClientConnInterface
}

func NewInfoToMosClient(cc grpc.ClientConnInterface) InfoToMosClient {
	return &infoToMosClient{cc}
}

func (c *infoToMosClient) AskAdress(ctx context.Context, in *Reloj, opts ...grpc.CallOption) (*RespuestaMos, error) {
	out := new(RespuestaMos)
	err := c.cc.Invoke(ctx, "/proto.Info_to_mos/AskAdress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InfoToMosServer is the server API for InfoToMos service.
// All implementations must embed UnimplementedInfoToMosServer
// for forward compatibility
type InfoToMosServer interface {
	AskAdress(context.Context, *Reloj) (*RespuestaMos, error)
	mustEmbedUnimplementedInfoToMosServer()
}

// UnimplementedInfoToMosServer must be embedded to have forward compatible implementations.
type UnimplementedInfoToMosServer struct {
}

func (UnimplementedInfoToMosServer) AskAdress(context.Context, *Reloj) (*RespuestaMos, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AskAdress not implemented")
}
func (UnimplementedInfoToMosServer) mustEmbedUnimplementedInfoToMosServer() {}

// UnsafeInfoToMosServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InfoToMosServer will
// result in compilation errors.
type UnsafeInfoToMosServer interface {
	mustEmbedUnimplementedInfoToMosServer()
}

func RegisterInfoToMosServer(s grpc.ServiceRegistrar, srv InfoToMosServer) {
	s.RegisterService(&InfoToMos_ServiceDesc, srv)
}

func _InfoToMos_AskAdress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Reloj)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoToMosServer).AskAdress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Info_to_mos/AskAdress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoToMosServer).AskAdress(ctx, req.(*Reloj))
	}
	return interceptor(ctx, in, info, handler)
}

// InfoToMos_ServiceDesc is the grpc.ServiceDesc for InfoToMos service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InfoToMos_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Info_to_mos",
	HandlerType: (*InfoToMosServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AskAdress",
			Handler:    _InfoToMos_AskAdress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/Proto.proto",
}

// LeiaToMosClient is the client API for LeiaToMos service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LeiaToMosClient interface {
	GetNumberRebelds(ctx context.Context, in *MessageLeia, opts ...grpc.CallOption) (*LeiaResponse, error)
}

type leiaToMosClient struct {
	cc grpc.ClientConnInterface
}

func NewLeiaToMosClient(cc grpc.ClientConnInterface) LeiaToMosClient {
	return &leiaToMosClient{cc}
}

func (c *leiaToMosClient) GetNumberRebelds(ctx context.Context, in *MessageLeia, opts ...grpc.CallOption) (*LeiaResponse, error) {
	out := new(LeiaResponse)
	err := c.cc.Invoke(ctx, "/proto.Leia_to_mos/GetNumberRebelds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LeiaToMosServer is the server API for LeiaToMos service.
// All implementations must embed UnimplementedLeiaToMosServer
// for forward compatibility
type LeiaToMosServer interface {
	GetNumberRebelds(context.Context, *MessageLeia) (*LeiaResponse, error)
	mustEmbedUnimplementedLeiaToMosServer()
}

// UnimplementedLeiaToMosServer must be embedded to have forward compatible implementations.
type UnimplementedLeiaToMosServer struct {
}

func (UnimplementedLeiaToMosServer) GetNumberRebelds(context.Context, *MessageLeia) (*LeiaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNumberRebelds not implemented")
}
func (UnimplementedLeiaToMosServer) mustEmbedUnimplementedLeiaToMosServer() {}

// UnsafeLeiaToMosServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LeiaToMosServer will
// result in compilation errors.
type UnsafeLeiaToMosServer interface {
	mustEmbedUnimplementedLeiaToMosServer()
}

func RegisterLeiaToMosServer(s grpc.ServiceRegistrar, srv LeiaToMosServer) {
	s.RegisterService(&LeiaToMos_ServiceDesc, srv)
}

func _LeiaToMos_GetNumberRebelds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageLeia)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeiaToMosServer).GetNumberRebelds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Leia_to_mos/GetNumberRebelds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeiaToMosServer).GetNumberRebelds(ctx, req.(*MessageLeia))
	}
	return interceptor(ctx, in, info, handler)
}

// LeiaToMos_ServiceDesc is the grpc.ServiceDesc for LeiaToMos service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LeiaToMos_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Leia_to_mos",
	HandlerType: (*LeiaToMosServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNumberRebelds",
			Handler:    _LeiaToMos_GetNumberRebelds_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/Proto.proto",
}

// InfoTo_FulcrumClient is the client API for InfoTo_Fulcrum service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InfoTo_FulcrumClient interface {
	AddCity(ctx context.Context, in *MessageINF, opts ...grpc.CallOption) (*Reloj, error)
	UpdateName(ctx context.Context, in *MessageINF, opts ...grpc.CallOption) (*Reloj, error)
	UpdateNumber(ctx context.Context, in *MessageINF, opts ...grpc.CallOption) (*Reloj, error)
	DeleteCity(ctx context.Context, in *MessageINF, opts ...grpc.CallOption) (*Reloj, error)
}

type infoTo_FulcrumClient struct {
	cc grpc.ClientConnInterface
}

func NewInfoTo_FulcrumClient(cc grpc.ClientConnInterface) InfoTo_FulcrumClient {
	return &infoTo_FulcrumClient{cc}
}

func (c *infoTo_FulcrumClient) AddCity(ctx context.Context, in *MessageINF, opts ...grpc.CallOption) (*Reloj, error) {
	out := new(Reloj)
	err := c.cc.Invoke(ctx, "/proto.Info_to_Fulcrum/AddCity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoTo_FulcrumClient) UpdateName(ctx context.Context, in *MessageINF, opts ...grpc.CallOption) (*Reloj, error) {
	out := new(Reloj)
	err := c.cc.Invoke(ctx, "/proto.Info_to_Fulcrum/UpdateName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoTo_FulcrumClient) UpdateNumber(ctx context.Context, in *MessageINF, opts ...grpc.CallOption) (*Reloj, error) {
	out := new(Reloj)
	err := c.cc.Invoke(ctx, "/proto.Info_to_Fulcrum/UpdateNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoTo_FulcrumClient) DeleteCity(ctx context.Context, in *MessageINF, opts ...grpc.CallOption) (*Reloj, error) {
	out := new(Reloj)
	err := c.cc.Invoke(ctx, "/proto.Info_to_Fulcrum/DeleteCity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InfoTo_FulcrumServer is the server API for InfoTo_Fulcrum service.
// All implementations must embed UnimplementedInfoTo_FulcrumServer
// for forward compatibility
type InfoTo_FulcrumServer interface {
	AddCity(context.Context, *MessageINF) (*Reloj, error)
	UpdateName(context.Context, *MessageINF) (*Reloj, error)
	UpdateNumber(context.Context, *MessageINF) (*Reloj, error)
	DeleteCity(context.Context, *MessageINF) (*Reloj, error)
	mustEmbedUnimplementedInfoTo_FulcrumServer()
}

// UnimplementedInfoTo_FulcrumServer must be embedded to have forward compatible implementations.
type UnimplementedInfoTo_FulcrumServer struct {
}

func (UnimplementedInfoTo_FulcrumServer) AddCity(context.Context, *MessageINF) (*Reloj, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCity not implemented")
}
func (UnimplementedInfoTo_FulcrumServer) UpdateName(context.Context, *MessageINF) (*Reloj, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateName not implemented")
}
func (UnimplementedInfoTo_FulcrumServer) UpdateNumber(context.Context, *MessageINF) (*Reloj, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNumber not implemented")
}
func (UnimplementedInfoTo_FulcrumServer) DeleteCity(context.Context, *MessageINF) (*Reloj, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCity not implemented")
}
func (UnimplementedInfoTo_FulcrumServer) mustEmbedUnimplementedInfoTo_FulcrumServer() {}

// UnsafeInfoTo_FulcrumServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InfoTo_FulcrumServer will
// result in compilation errors.
type UnsafeInfoTo_FulcrumServer interface {
	mustEmbedUnimplementedInfoTo_FulcrumServer()
}

func RegisterInfoTo_FulcrumServer(s grpc.ServiceRegistrar, srv InfoTo_FulcrumServer) {
	s.RegisterService(&InfoTo_Fulcrum_ServiceDesc, srv)
}

func _InfoTo_Fulcrum_AddCity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageINF)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoTo_FulcrumServer).AddCity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Info_to_Fulcrum/AddCity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoTo_FulcrumServer).AddCity(ctx, req.(*MessageINF))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoTo_Fulcrum_UpdateName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageINF)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoTo_FulcrumServer).UpdateName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Info_to_Fulcrum/UpdateName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoTo_FulcrumServer).UpdateName(ctx, req.(*MessageINF))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoTo_Fulcrum_UpdateNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageINF)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoTo_FulcrumServer).UpdateNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Info_to_Fulcrum/UpdateNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoTo_FulcrumServer).UpdateNumber(ctx, req.(*MessageINF))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoTo_Fulcrum_DeleteCity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageINF)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoTo_FulcrumServer).DeleteCity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Info_to_Fulcrum/DeleteCity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoTo_FulcrumServer).DeleteCity(ctx, req.(*MessageINF))
	}
	return interceptor(ctx, in, info, handler)
}

// InfoTo_Fulcrum_ServiceDesc is the grpc.ServiceDesc for InfoTo_Fulcrum service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InfoTo_Fulcrum_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Info_to_Fulcrum",
	HandlerType: (*InfoTo_FulcrumServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddCity",
			Handler:    _InfoTo_Fulcrum_AddCity_Handler,
		},
		{
			MethodName: "UpdateName",
			Handler:    _InfoTo_Fulcrum_UpdateName_Handler,
		},
		{
			MethodName: "UpdateNumber",
			Handler:    _InfoTo_Fulcrum_UpdateNumber_Handler,
		},
		{
			MethodName: "DeleteCity",
			Handler:    _InfoTo_Fulcrum_DeleteCity_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/Proto.proto",
}
